// backend/src/services/generation/postprocess.js

/**
 * @fileoverview This module contains functions to clean and process raw chapter text
 * generated by the Gemini API. Its primary function is to correct for known generation
 * bugs and format the text for consistent output.
 */
import { callGeminiAPI } from '../gemini.service.js';


/**
 * Cleans up raw chapter text from the Gemini API, specifically targeting known bugs.
 * @param {string} chapterText The raw chapter text to process.
 * @param {object} promptDetails The user-provided details for the story, used for dynamic corrections.
 * @returns {Promise<string>} The cleaned and processed chapter text.
 */
export const postprocessChapterText = async (chapterText, promptDetails) => {
    if (!chapterText || typeof chapterText !== 'string') {
        return '';
    }

    const genre = promptDetails?.genre?.toLowerCase() || 'general fiction';
    const characterName = promptDetails?.characterDetails?.name || 'the protagonist';

    const replacementPrompt = `
You are a creative writer. Based on a story in the ${genre} genre about a character named "${characterName}", generate a single, creative name or phrase that could be used to refer to a central mystery, a powerful item, or a mysterious antagonist.
DO NOT use any markdown, conversational text, or explanations. Just provide the name.
If the genre is comedy or slice-of-life, provide a humorous or quirky name for a simple problem.
Examples:
Fantasy: The Shadowed One
Sci-Fi: The Cosmic Anomaly
Horror: The Whispering Shade
Comedy: The Case of the Missing Socks

Your response:`.trim();

    let replacementPhrase;
    try {
        replacementPhrase = await callGeminiAPI(replacementPrompt, 'gemini-2.5-flash');
        // Clean up any stray quotation marks or extra text from the response
        replacementPhrase = replacementPhrase.trim().replace(/^"|"$/g, '');
    } catch (error) {
        console.error('Failed to dynamically generate replacement phrase, using a fallback.', error);
        replacementPhrase = 'The Forgotten One';
    }
    
    let processedText = chapterText;

    // 1. Trim leading and trailing whitespace.
    processedText = processedText.trim();
    
    // 2. Remove any accidental chapter headings or other meta commentary.
    processedText = processedText.replace(/^\s*chapter\s+\d+[:.]?\s*$/gim, '').trim();
    processedText = processedText.replace(/^\s*(the end|epilogue)\s*$/gim, '').trim();

    // 3. The critical bug fix: replace "The Longest" with the dynamic alternative.
    processedText = processedText.replace(/The Longest/gi, replacementPhrase);
    
    return processedText;
};